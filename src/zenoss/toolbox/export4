#!/usr/bin/env python

import argparse
import os
import subprocess
import sys
import tempfile

parser = argparse.ArgumentParser(description="4.x export script")

default_export_fn = '4x-export.tar'

parser.add_argument('-e', '--existing', help='path to existing backup archive')
parser.add_argument('-n', '--new', help='make a new backup archive', action='store_const', const=1)
parser.add_argument('-f', '--filename', help='specify name of export file. export is created in the current directory. if unspecified, name is %s' % default_export_fn, default=default_export_fn)
parser.add_argument('-s', '--skip-zodb', help='backup only events and perf, only helpful with -n', action='store_const', const=1)

args = parser.parse_args()

if not args.existing and not args.new:
    print 'you must specify either an existing backup (-e ARCHIVE) or the creation of a new one (-n)'
    sys.exit(0)

if args.existing:
    if not os.path.exists(args.existing):
        print 'a path was provided but does not contain a file'
        sys.exit(1)
    backup_fn = args.existing
    print 'using provided backup'

if args.new:
    print 'making new backup ...'
    backup_dir = os.path.join(os.environ['ZENHOME'], 'backups')
    before_dir = set(os.listdir(backup_dir))
    zbcommand = ['zenbackup']
    if args.skip_zodb:
        zbcommand.append('--no-zodb')
    zbresult = subprocess.call(zbcommand)
    if zbresult is not 0:
        print 'no backup specified and making one failed, aborting ...'
        sys.exit(1)
    after_dir = set(os.listdir(backup_dir))
    backup_fn = os.path.join(backup_dir, list(after_dir - before_dir)[0])

components_file = 'componentList.txt'
components_fn = os.path.join(os.getcwd(), components_file)

dmd_snippet = '''
import sys
devcount = 0
for dev in dmd.Devices.getSubDevices():
    print '### components for %s' % '/'.join(dev.getPrimaryPath())
    for comp in dev.getMonitoredComponents():
        print '/'.join(comp.getPrimaryPath())
    devcount = devcount + 1
    if devcount % 100 is 0:
        sys.stderr.write('exported 100 devices\\n')

sys.stderr.write('a total of %d devices in export\\n' % devcount)
'''

print 'exporting component list ...'

script_file = tempfile.NamedTemporaryFile(delete=False, dir=os.getcwd())

try:
    script_file.write(dmd_snippet)
    script_file.close()
    subprocess.call(['zendmd', '--script=%s' % script_file.name], stdout=open(components_fn, 'w'), stdin=subprocess.PIPE, stderr=None)
finally:
    os.unlink(script_file.name)

tar_result = subprocess.call(['tar', 'cf', args.filename, components_file])
if tar_result is not 0:
    print 'failed to create tarfile'
    sys.exit(1)

print 'component list exported'

backup_split = os.path.split(backup_fn)
export_fn = os.path.join(os.getcwd(), args.filename)

tar_result = subprocess.call(['tar', '-C', backup_split[0], '-uf', export_fn, backup_split[1]])
if tar_result is not 0:
    print 'failed to add backup to tarfile'
    sys.exit(1)

print 'export successful. file is %s' % export_fn
